/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PreviewImport } from './routes/preview'
import { Route as InitiativeImport } from './routes/initiative'
import { Route as Initaitive2Import } from './routes/initaitive2'
import { Route as EncountersImport } from './routes/encounters'
import { Route as BuilderImport } from './routes/builder'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PreviewRoute = PreviewImport.update({
  id: '/preview',
  path: '/preview',
  getParentRoute: () => rootRoute,
} as any)

const InitiativeRoute = InitiativeImport.update({
  id: '/initiative',
  path: '/initiative',
  getParentRoute: () => rootRoute,
} as any)

const Initaitive2Route = Initaitive2Import.update({
  id: '/initaitive2',
  path: '/initaitive2',
  getParentRoute: () => rootRoute,
} as any)

const EncountersRoute = EncountersImport.update({
  id: '/encounters',
  path: '/encounters',
  getParentRoute: () => rootRoute,
} as any)

const BuilderRoute = BuilderImport.update({
  id: '/builder',
  path: '/builder',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/builder': {
      id: '/builder'
      path: '/builder'
      fullPath: '/builder'
      preLoaderRoute: typeof BuilderImport
      parentRoute: typeof rootRoute
    }
    '/encounters': {
      id: '/encounters'
      path: '/encounters'
      fullPath: '/encounters'
      preLoaderRoute: typeof EncountersImport
      parentRoute: typeof rootRoute
    }
    '/initaitive2': {
      id: '/initaitive2'
      path: '/initaitive2'
      fullPath: '/initaitive2'
      preLoaderRoute: typeof Initaitive2Import
      parentRoute: typeof rootRoute
    }
    '/initiative': {
      id: '/initiative'
      path: '/initiative'
      fullPath: '/initiative'
      preLoaderRoute: typeof InitiativeImport
      parentRoute: typeof rootRoute
    }
    '/preview': {
      id: '/preview'
      path: '/preview'
      fullPath: '/preview'
      preLoaderRoute: typeof PreviewImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/builder': typeof BuilderRoute
  '/encounters': typeof EncountersRoute
  '/initaitive2': typeof Initaitive2Route
  '/initiative': typeof InitiativeRoute
  '/preview': typeof PreviewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/builder': typeof BuilderRoute
  '/encounters': typeof EncountersRoute
  '/initaitive2': typeof Initaitive2Route
  '/initiative': typeof InitiativeRoute
  '/preview': typeof PreviewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/builder': typeof BuilderRoute
  '/encounters': typeof EncountersRoute
  '/initaitive2': typeof Initaitive2Route
  '/initiative': typeof InitiativeRoute
  '/preview': typeof PreviewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/builder'
    | '/encounters'
    | '/initaitive2'
    | '/initiative'
    | '/preview'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/builder'
    | '/encounters'
    | '/initaitive2'
    | '/initiative'
    | '/preview'
  id:
    | '__root__'
    | '/'
    | '/builder'
    | '/encounters'
    | '/initaitive2'
    | '/initiative'
    | '/preview'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BuilderRoute: typeof BuilderRoute
  EncountersRoute: typeof EncountersRoute
  Initaitive2Route: typeof Initaitive2Route
  InitiativeRoute: typeof InitiativeRoute
  PreviewRoute: typeof PreviewRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BuilderRoute: BuilderRoute,
  EncountersRoute: EncountersRoute,
  Initaitive2Route: Initaitive2Route,
  InitiativeRoute: InitiativeRoute,
  PreviewRoute: PreviewRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/builder",
        "/encounters",
        "/initaitive2",
        "/initiative",
        "/preview"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/builder": {
      "filePath": "builder.tsx"
    },
    "/encounters": {
      "filePath": "encounters.tsx"
    },
    "/initaitive2": {
      "filePath": "initaitive2.tsx"
    },
    "/initiative": {
      "filePath": "initiative.tsx"
    },
    "/preview": {
      "filePath": "preview.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
